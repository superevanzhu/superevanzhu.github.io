<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[什么是jsonl格式]]></title>
    <url>%2F2019%2F05%2F20%2F%E4%BB%80%E4%B9%88%E6%98%AFjsonl%E6%A0%BC%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[JSON Lines文件，是在json格式基础上做了几个调整： 每一行都是合法的json值。 以\n作为换行符。 utf-8编码。 这样，尤其适合作为日志文件，或者管道文件 一个jsonl文件的例子12345[&quot;Name&quot;, &quot;Session&quot;, &quot;Score&quot;, &quot;Completed&quot;][&quot;Gilbert&quot;, &quot;2013&quot;, 24, true][&quot;Alexa&quot;, &quot;2013&quot;, 29, true][&quot;May&quot;, &quot;2012B&quot;, 14, false][&quot;Deloise&quot;, &quot;2012A&quot;, 19, true] 默认后缀名是.jsonl 参考jsonlines.org]]></content>
  </entry>
  <entry>
    <title><![CDATA[程序员的网址导航]]></title>
    <url>%2F2019%2F05%2F20%2F%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E7%BD%91%E5%9D%80%E5%AF%BC%E8%88%AA%2F</url>
    <content type="text"><![CDATA[[[toc]] 技术问答: desc: stackoverflow url: http://stackoverflow.com/ 技术博客: desc: 我的blogurl: https://superevanzhu.github.io/ desc: 一个练习算法的站点url: https://www.51nod.com/index.html desc: 粉丝日志。该作者写了很多的技术干货url: http://blog.fens.me/ 技术综合: desc: info，应该是编程方面权威性媒体了url: https://www.infoq.com/ desc: 简明现代魔法，以前是个人博客，现在内容扩展了，干货很多。url: http://www.nowamagic.net/ desc: 鸟哥笔记。url: http://www.niaogebiji.com/ desc: 阿迪优。综合性的文章，干货很多url: https://www.adiyou.com/ 非技术: desc: 李叫兽的知乎专栏，主要是营销和用户行为方面的干货url: https://zhuanlan.zhihu.com/lijiaoshou desc: 市场部。一个市场相关的站点。url: http://www.shichangbu.com/ desc: 一个投资业人的知乎专栏。url: https://zhuanlan.zhihu.com/FellowPlus 数据分析和行业观察: desc: ec数据分析url: http://www.shujufenxi.net/ desc: 互联网分析沙龙url: http://www.techxue.com/ desc: 中国行业竞争情报网url: http://www.chinacir.com.cn/ desc: 中国市场调研在线url: http://www.cninfo360.com/ 其他: desc: 经管之家（原人大经济论坛）url: http://bbs.pinggu.org/ desc: 哈佛商业论坛url: http://www.hbrchina.org/ desc: 头脑风暴url: http://bbs.795.com.cn/tnfb/ 程序员最应当上的网站.md 代码库Github 问答类 Google Stack Overflow Quora 资讯类程序员需要资讯吗？当然，因为要抬头看路的。 Hacker News 学习类各种课程 No Excuselist 商业 Business balls 众包 topcoder 思维训练 memory-improvement-tips]]></content>
  </entry>
  <entry>
    <title><![CDATA[计算机编译技术三大圣经]]></title>
    <url>%2F2019%2F05%2F20%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E8%AF%91%E6%8A%80%E6%9C%AF%E4%B8%89%E5%A4%A7%E5%9C%A3%E7%BB%8F%2F</url>
    <content type="text"><![CDATA[计算机编译技术三大圣经 1.龙书(Dragon book)书名是Compilers: Principles,Techniques,and Tools作者是：Alfred V.Aho,Ravi Sethi,Jeffrey D.Ullman国内所有的编译原理教材都是抄的它的，而且只是抄了最简单的前端的一些内容。 2.鲸书(Whale book)书名是：Advanced Compiler Design and Implementation作者是：Steven S.Muchnick也就是高级编译原理，象什么陈疑云之类的估计也就是这个水平不错了 3.虎书(Tiger book)书名是：Modern Compiler Implementation in Java/C++/ML,Second Edition作者是：Andrew W.Appel,with Jens Palsberg这本书是3本书中最薄的一本，也是最最牛的一本！ （完）]]></content>
  </entry>
  <entry>
    <title><![CDATA[google搜索的操作符]]></title>
    <url>%2F2019%2F05%2F20%2Fgoogle%E6%90%9C%E7%B4%A2%E7%9A%84%E6%93%8D%E4%BD%9C%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[[[toc]] 一、操作符特殊含义的符号。 + 强制搜索强制使用关键词搜索。例如：start +how。和精确匹配有点像。默认情况下，Google会忽略is,am,how此类的常用词。 ~ 同义词关键词前加波浪线。如：~table 。 * 通配符如：Google was founded in *和&quot;love *&quot; ** 表示指数作用同 ^ ，如：2**10 。 ^ 指数作用同 ** ，如：2^10 。 “” 精确匹配用引号精确搜索，有时可只用左侧引号。如：&quot;Google hacking&quot; = &quot;Google hacking。 | 逻辑或作用同 OR ，如：Google hacking | hacks .. 指定数值的范围用于限定数值范围，如：spring festival logo 2002..2009 @ 搜索社交媒体例如：@twitter $ 搜索价格例如：手机 $400 # 搜索锚点例如：#throwbackthursday - 排除关键词排除关键词。如：MP3 -MP4，搜索包含”MP3”而不包含”MP4”的网页。注意：-号后面没有空格。 二、操作指令特殊含义的单词。 OR 逻辑或注意是大写，和前面的|是等同的。例如：天气 OR 气候。 site 指定网站（或域名）查询例如：中美关系 site:news.com和中美关系 site:com related 搜索相似的页面例如：related:zhihu.com会搜出一堆百科站点 综合查询某网页的信息例如：info:xxx.com 搜索某网页在Google缓存（网页快照）中的旧版本例如：cache:xxx.com 其它更多操作指令 算符 用途 用法 allinanchor 限制搜索的词语是网页中链接内包含的关键词（可使用多个关键词） allinanchor:keyword1 keyword2 allintext 限制搜索的词语是网页内文包含的关键词（可使用多个关键词） allintext:keyword1 keyword2 allintitle 限制搜索的词语是网页标题中包含的关键词（可使用多个关键词） allintitle:keyword1 keyword2 allinurl 限制搜索的词语是网页网址中包含的关键词（可使用多个关键词） inurl:keyword1 keyword2 define 关键词定义，查询关键词的网络释义 define:google filetype 限制所搜索的文件一个特定的格式 filetype:extension ext 同filetype ext:extension inanchor 限制搜索的词语是网页中链接内包含的关键词 inanchor:keyword intext 限制搜索的词语是网页内文包含的关键词 intext:keyword intitle 限制搜索的词语是网页标题中包含的关键词 intitle:keyword inurl 限制搜索的网页的地址 inurl:keyword link: 搜索链向某网站/网址的网页 link:www.google.com 附：filetype支持的类型 Adobe Flash (.swf) Adobe Portable Document Format (.pdf) Adobe PostScript (.ps) Autodesk Design Web Format (.dwf) Google Earth (.kml, .kmz) GPS eXchange Format (.gpx) Hancom Hanword (.hwp) HTML (.htm, .html, other file extensions) Microsoft Excel (.xls, .xlsx) Microsoft PowerPoint (.ppt, .pptx) Microsoft Word (.doc, .docx) OpenOffice presentation (.odp) OpenOffice spreadsheet (.ods) OpenOffice text (.odt) Rich Text Format (.rtf) Scalable Vector Graphics (.svg) TeX/LaTeX (.tex) Text (.txt, .text, other file extensions), including source code in common programming languages: Basic source code (.bas) C/C++ source code (.c, .cc, .cpp, .cxx, .h, .hpp) C# source code (.cs) Java source code (.java) Perl source code (.pl) Python source code (.py) Wireless Markup Language (.wml, .wap) XML (.xml)]]></content>
  </entry>
  <entry>
    <title><![CDATA[linux搭建git服务器]]></title>
    <url>%2F2019%2F05%2F20%2Flinux%E6%90%AD%E5%BB%BAgit%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[linux搭建git服务器Git是分布式的代码管理系统。所谓分布式，就是没有中心点，所有机器都可以成为“服务器”。 下面我们以centos7为例，一步步配置git服务器。 一、如何搭建Git 首先，安装git。简单起见，使用yum安装就可以了。如下： 1yum -y install git 当然，你也可以编译源码安装。 创建一个Git仓库。 12mkdir hello &amp;&amp; cd hellogit init --bare 上面命令创建了hello目录，然后初始化成git仓库。其中的参数--bare，表示建的是裸仓库。虽然不加--bare也可以，推荐加上。裸仓库和普通仓库的区别，可以参考这里。 到此，Git服务器已经搭建好了，可以访问它。如下： 1git clone &lt;用户名&gt;@&lt;Git主机地址&gt;:&lt;git仓库路径&gt; 默认情况下，git用的是Http协议，会要求输入&lt;用户名&gt;帐号对应的密码。 二、Git可选配置2.1 创建专用帐号为了方便管理和安全上的考虑，我们可以给Git创建一个专用的帐号。12useradd git_userpasswd 123456 上面见了一个git_user帐号。要确保git_user拥有hello目录的读写权限。可以设置hello目录权限，当然也可以把它的拥有者改成该用户，像这样：1chown -R git_user:git_user hello 这样以后都通过git_user用户访问git仓库。 2.2 配置SSH访问前面说过，git仓库默认通过Http协议访问，每次都要输入密码。可以配置成SSH的方式，通过公钥认证，就不用每次都输入密码了。 SSH认证原理就是利用非对称密钥对进行认证。使用前客户端将自己的公钥交给服务器就可以了。 linux上配置Git SSH访问，需要两步： git服务器启用ssh认证，配置$HOME/.ssh目录权限和$HOME/.ssh/authorized_keys文件。 git客户端将自己的公钥交给服务端，保存到服务端authorized_keys文件。 下面我们开始具体的配置 安装openssh。centos7已经内置了openssh，所以可以跳过。如果没有openssh的话也可以自己安装： 1yum install -y openssh 验证文件权限设置。SSH认证配置默认保存在$HOME/.ssh目录下。所以，git_user用户对应的就是/home/git_user/.ssh目录。这里需要特别注意两个地方： $HOME/.ssh目录和目录下的所有文件，保证只有本用户有写权限，否则SSH认证通不过。 .ssh/authorized_keys文件用来保存客户机的公钥。 客户端上传公钥，追加到authorized_keys文件。 其中有三点需要注意的地方，如果已经按照以上方法做了，还是不可以，那就比照下边三条对比一下： authorized_keys 文件必须是600权限(也就是-rw——-)或者644 .ssh目录必须是700权限(也就是drwx——) /home/work目录 必须是 755权限 即drwxr-xr-x。第（3）条太坑了，就因为 /home/user 目录是777，不是755，怎么都不行，信任关系建不起来，最后把/home/user目录的权限由777改成755就立搞定了 参考 Getting-Git-on-a-Server how-to-set-up-a-private-git-server-on-a-vps how-to-run-your-own-git-server]]></content>
  </entry>
  <entry>
    <title><![CDATA[使用markdown愉快的写文档]]></title>
    <url>%2F2019%2F05%2F20%2F%E4%BD%BF%E7%94%A8markdown%E6%84%89%E5%BF%AB%E7%9A%84%E5%86%99%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"><![CDATA[标题 无序列表 有序列表 文字的样式 引用文字 另一种文字引用 代码块 行内代码 水平分割线 可点击链接 另一种链接 插入图片链接 反斜杠转义 更多非标准语法 表格 Markdown编辑器 参考 标题在文字前面加上1~6个#号。可以表现出标题的效果。1个#是最大的标题，6个#是最小的标题。注意，#和文字之间要空一个空格，其他的标记一般都是这样。1234567# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题####### 六级标题 无序列表文字前面加上-&lt;空格&gt;或者+&lt;空格&gt;或者*&lt;空格&gt;，可以表现出列表的效果： 例子： - 文本1 - 文本2 等同于： * 文本1 * 文本2 也等同于： + 文本1 + 文本2 有序列表文字前面加上&lt;数字&gt;.&lt;空格&gt;，可以表现出带序号的列表。从1开始显示，1，2，3，…这样的。 1. 列表项 2. 列表项 3. 列表项 注意，有序列表中的数字的大小是无关的 1. 列表项 1. 列表项 1. 列表项 所以，像上面的写法，都是1，输出的也是按照1,2,3…顺序输出的。 文字的样式文字本身的样式，斜体，加粗，删除线，行内引用。 *斜体* **加粗** ~~删除线~~ `行内引用` 效果如下：斜体加粗删除线行内引用 引用文字格式： &gt; 一段的文字，可以产生类似与于邮件中，引用一段文字的效果。 我是一段文字哦 注意，引用的文字，用一个空白行结束。 另一种文字引用格式：一段文字前面加上4个空格可以产生一大块突出显示的文字。 我是一段文字哦 代码块想写一段代码块，可以用一对三个连续的反引号： \12345var comName = &apos;ngmm&apos;; //我是代码块\ 或者，不用三个反引号，而是将一段代码，整体缩进一个制表符，也能实现相同效果。 行内代码如果代码是不块，而是在一行内。用一对反引号括起来。 `我说行内代码` 水平分割线用三个以上的*或-或_占用一行，可以产生一条水平分隔线。例如： *** --- ___ 可点击链接格式：[链接的文字](链接的网址)，可以产生一个可点击的链接。例如： 必应 另一种链接链接也可以分成两部分：先定义链接、再使用链接格式：定义一个链接：[链接的ID]: 链接的网址 &quot;链接的文字&quot; 随后，可以在别的地方使用它：[链接的文字][链接的ID] 插入图片链接markdown本身是文本，所以不支持粘贴图片的。但是我们可以粘贴图片的链接，从而显示图片（图片本身是存在别的地方的）。 格式：![图片的alt文字](图片的网址) 反斜杠转义前面说到，markdown中*,+,-等符号是有特定意义的。那么，如果我想在文本中显示*,+,-本身呢？可以在特殊符号前面加上\。例如123`\*` -&gt; 输出`*``\+` -&gt; 输出`+``\-` -&gt; 输出`-` 更多的特殊符号：123456789101112\ 反斜线` 反引号* 星号_ 底线&#123;&#125; 花括号[] 方括号() 括弧# 井字号+ 加号- 减号. 英文句点! 惊叹号 更多非标准语法markdown还有更多的语法，比如表格之类的，不过只有少部分编辑器才能正确显示。这就意味着，如果真的想用他们的，得花点时间寻找一个支持更多Markdown语法的编辑器 表格例子11234||||-|-||a|b||x|y| 效果 a b x y 例子212345|Tables|Are|Cool||-|:-:|-:||col3 is|right-aligned|$1600||col2 is|centered|$12||zebrastripes|areneat|$1| 效果： Tables Are Cool col3 is right-aligned $1600 col2 is centered $12 zebrastripes areneat $1 设置列的对齐方式：左对齐、居中、右对齐 123456# 默认左对齐-# 右对齐-:# 居中对齐:-: Markdown编辑器 linux下有reText mack下推荐typora 浏览器插件有MaDe 参考 Markdown 语法说明]]></content>
  </entry>
  <entry>
    <title><![CDATA[js实战-正则表达式入门]]></title>
    <url>%2F2019%2F05%2F20%2Fjs%E5%AE%9E%E6%88%98-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[目的：熟练掌握js的正则表达式 目录 语法 修饰符 方括号 元字符 方括号中的. 转义字符 匹配位置 防止过度匹配 子模式 子模式的引用 非获取匹配 例子 常用问题 如何匹配任意字符，包含换行符？ 参考 语法直接量语法1/pattern/attributes 或者，创建 RegExp 对象的语法：1new RegExp(pattern, attributes); 修饰符 修饰符 描述 i 执行对大小写不敏感的匹配。 g 执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。 m 执行多行匹配。 方括号方括号用于查找某个范围内的字符： 表达式 描述 [abc] 查找方括号之间的任何字符。 [^abc] 查找任何不在方括号之间的字符。 [0-9] 查找任何从 0 至 9 的数字。 [a-z] 查找任何从小写 a 到小写 z 的字符。 [A-Z] 查找任何从大写 A 到大写 Z 的字符。 [A-z] 查找任何从大写 A 到小写 z 的字符。 [adgk] 查找给定集合内的任何字符。 [^adgk] 查找给定集合外的任何字符。 `(red blue green)` 查找任何指定的选项。 元字符元字符（Metacharacter）是拥有特殊含义的字符： 元字符 描述 . 查找单个字符，除了换行和行结束符。 \w 查找单词字符。 \W 查找非单词字符。 \d 查找数字。 \D 查找非数字字符。 \s 查找空白字符。 \S 查找非空白字符。 \b 匹配单词边界。 \B 匹配非单词边界。 \0 查找 NUL 字符。 \n 查找换行符。 \f 查找换页符。 \r 查找回车符。 \t 查找制表符。 \v 查找垂直制表符。 \xxx 查找以八进制数 xxx 规定的字符。 \xdd 查找以十六进制数 dd 规定的字符。 \uxxxx 查找以十六进制数 xxxx 规定的 Unicode 字符。 方括号中的.需要注意的是，.在方括号中，等同于\.。 123[.][\.]\. 那么，如何表示，所有字符呢？1(?:[\r\n]?.)* 转义字符有些字符有特殊含义，如果我们像表示它本身的话，需要转义。比如/是正则表达式的边界符号，如果要表示斜杠本身，需写作\/。 以下这些都是需要转义的符号：1.,\,/,*,?,+,[,(,),],&#123;,&#125;,^,$,| 普通字符转义和不转义是一样的，所以不能确定时，转义总不会错的。 匹配位置 符号 含义 ?=str 匹配这些字符：它的后面紧跟着str（可以是任意字符串） ?!str 匹配这些字符：它的后面不紧跟着str（可以是任意字符串） 防止过度匹配过度匹配，又叫贪婪模式。指正则引擎默认会尽可能长的匹配。与之相仿的叫做惰性匹配。语法是 贪婪模式（默认） 惰性模式 匹配描述 ? ?? 匹配 0 个或 1 个 + +? 匹配 1 个或多个 * *? 匹配 0 个或多个 {n} {n}? 匹配 n 个 {n,m} {n,m}? 匹配 n 个或 m 个 {n,} {n,}? 匹配 n 个或多个 例子：12&quot;abc&quot;.match(/\w+/) //=&gt;[&quot;abc&quot;]&quot;abc&quot;.match(/\w+?/) //=&gt;[&quot;a&quot;] 子模式像(abc)这种，将多个字符括起来，做为一个整体，称之为子模式。 子模式的引用在替换时，可以引用前面匹配的结果，用$1,$2,…表示1&quot;hello,zhu&quot;.replace(/hello(.*)/,&apos;hi$1&apos;) //=&gt;hi,zhu 上面的正则，会将(.*)匹配后赋值给$1（因为是第一个）。 非获取匹配获取匹配：默认情况下，子模式会将匹配的结果赋值给变量$1,$2…。如果不想赋值呢？则在子模式前面加上?:。 例子：12&quot;hello,zhu&quot;.replace(/hello(.*)/,&apos;hi$1&apos;) //=&gt;hi,zhu&quot;hello,zhu&quot;.replace(/hello?:(.*)/,&apos;hi$1&apos;) //=&gt;hello,zhu 比较上面两行语句。第二行，由于采取了非获取匹配，导致整个匹配为null，所以替换函数没有效果（&#39;hello,zhu&#39;.match(/hello?:(.*)/)==&gt;null） 例子 一个很大的金额，怎么实现实现千分位分割呢？ 123function format(val)&#123; return (val+&quot;&quot;).replace(/(\d)(?=(\d&#123;3&#125;)+$)/g, &quot;$1,&quot;);&#125; a1,b2,c3怎么截出其中的1,2,3呢？ 1&quot;a1,b2,c3&quot;.match(/\d+/g) 常用问题如何匹配任意字符，包含换行符？1[^] 解析：^是取反，对空集合取反，就是所有啦 参考 jsref_obj_regexp js regexp]]></content>
  </entry>
</search>
