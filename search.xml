<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[经典编程书籍]]></title>
      <url>%2F2017%2F03%2F29%2F10027%2F</url>
      <content type="text"><![CDATA[经典编程书籍大全100+ 经典技术书籍，涵盖：计算机系统与网络、系统架构、算法与数据结构、前端开发、后端开发、移动开发、数据库、测试、项目与团队、程序员职业修炼、求职面试 和 编程相关的经典书籍。 这个列表综合了伯乐在线网站以往推荐经典书籍文章中的列表，以及在微信和微博中被广泛推荐的好书。虽然已经包括了100多本，覆盖的面也比较全。仍然有很多方面需要补充，而且相信还有很多没有被收录的好书。欢迎大家在 issues 中推荐或自荐。 计算机系统与网络 《图灵的秘密:他的生平、思想及论文解读》 《计算机系统概论》 《深入理解Linux内核》 《深入Linux内核架构》 《TCP/IP详解 卷1：协议》 《Linux系统编程（第2版）》 《Linux内核设计与实现（第3版）》 《深入理解计算机系统（原书第2版）》 《计算机程序的构造和解释（原书第2版）》 《编码：隐匿在计算机软硬件背后的语言》 《性能之颠：洞悉系统、企业与云计算》 《UNIX网络编程 卷1：套接字联网API（第3版）》 《UNIX网络编程 卷2：进程间通信》 《Windows核心编程(第5版)》 《WireShark网络分析就这么简单》 《WireShark网络分析的艺术》 编程通用 《编程原本》 《代码大全》 《UNIX编程艺术》 《代码整洁之道》 《编程珠玑（第2版）》 《编程珠玑（续）》 《软件调试的艺术》 《修改代码的艺术》 《编程语言实现模式》 《编写可读代码的艺术》 《解析极限编程：拥抱变化》 《精通正则表达式（第3版）》 《编译原理（第2版）》龙书 《重构：改善既有代码的设计》 《七周七语言：理解多种编程范型》 《调试九法：软硬件错误的排查之道》 《程序设计语言：实践之路（第3版）》 《计算的本质：深入剖析程序和计算机》 《设计模式 : 可复用面向对象软件的基础》 算法与数据结构 《算法（第4版）》 《算法导论（原书第2版）》 《Python算法教程》 《算法设计与分析基础（第3版）》 《学习 JavaScript 数据结构与算法》 《数据结构与算法分析 : C++描述（第4版）》 《数据结构与算法分析 : C语言描述（第2版）》 《数据结构与算法分析 : Java语言描述（第2版）》 职业修炼与规划 《大教堂与集市》 《卓有成效的程序员》 《程序员的职业素养》 《程序员修炼之道：从小工到专家》 《软件开发者路线图：从学徒到高手》 《我编程，我快乐: 程序员职业规划之道》 《程序员的思维修炼：开发认知潜能的九堂课》 《高效程序员的45个习惯：敏捷开发修炼之道(修订版)》 大师访谈 《编程大师智慧》 《编程大师访谈录》 《编程人生 : 15位软件先驱访谈录》 《奇思妙想 : 15位计算机天才及其重大发现》 《图灵和ACM图灵奖》 架构/性能 《微服务设计》 《大数据日知录》 《企业应用架构模式》 《Web性能权威指南》 《SRE：Google运维解密》 《发布！软件的设计与部署》 《高扩展性网站的 50 条原则》 《大型网站技术架构:核心原理与案例分析》 《恰如其分的软件架构：风险驱动的设计方法》 《软件系统架构：使用视点和视角与利益相关者合作（第2版）》 Web前端 《高性能 JavaScript》 《锋利的 jQuery（第2版）》 《JavaScript 忍者秘籍》（感谢@joker-danta 补充推荐） 《编写可维护的 JavaScript》 《你不知道的 JavaScript（上）》 《JavaScript 权威指南（第6版）》 《JavaScript 语言精粹（修订版）》 《JavaScript DOM编程艺术 （第2版）》 《JavaScript 高级程序设计（第3版）》 《JavaScript 异步编程：设计快速响应的网络应用》 《Effective JavaScript：编写高质量JavaScript代码的68个有效方法》 《HTML5 权威指南》 《HTML5 秘籍（第2版）》 《HTML5 与 CSS3 基础教程（第八版）》 《CSS 揭秘》 《CSS 设计指南（第3版）》 《CSS 权威指南（第3版）》 《深入浅出 HTML 与 CSS》 Java开发 《Java8 实战》 《Java并发编程实战》 《Java性能权威指南》 《Java程序员修炼之道》 《实战Java高并发程序设计》 《Java编程思想 （第4版）》 《深入理解Java虚拟机（第2版）》 《Effective java 中文版（第2版）》 《Java核心技术·卷1：基础知识（原书第9版）》 《Java核心技术·卷2：高级特性（原书第9版）》 .NET 《精通C#（第6版）》 《深入理解C#（第3版）》 《CLR via C#（第4版）》 Python 《集体智慧编程》 《笨办法学Python》 《Python基础教程》 《Python源码剖析》 《Head First Python》 《与孩子一起学编程》 《Python学习手册（第4版）》 《Python Cookbook（第3版）》 《Python参考手册（第4版）》 《Python核心编程（第3版）》 《Python科学计算（第2版）》 《利用 Python 进行数据分析》 《Think Python：像计算机科学家一样思考Python（第2版）》 《Python编程实战:运用设计模式、并发和程序库创建高质量程序》 《Python绝技：运用Python成为顶级黑客》 《Flask Web开发:基于Python的Web应用开发实战》 Android 《Android编程权威指南（第2版）》 《移动应用UI设计模式（第2版）》 iOS 《iOS编程实战》 《iOS编程（第4版）》 《Objective-C高级编程》 《Effective Objective-C 2.0：编写高质量iOS与OS X代码的52个有效方法》 PHP 《Head First PHP &amp; MySQL（中文版）》 《深入PHP：面向对象、模式与实践（第3版）》 C语言 《C标准库》 《C和指针》 《C专家编程》 《C陷阱与缺陷》 《C语言接口与实现》 《C程序设计语言（第2版）》 《C语言参考手册（第5版）》 C++ 《C++标准库》 《C++编程思想》 《C++语言的设计与演化》 《C++程序设计原理与实践》 《C++ Primer （中文第5版）》 《[C++ Primer习题集(第5版)](https://www.amazon.cn/gp/product/B00S6U4C6E 》 《[C++程序设计语言(第1-3部分)(原书第4版)](https://www.amazon.cn/gp/product/B01I9BNASA 》 《Effective C++:改善程序与设计的55个具体做法(第3版)(中文版) 》 《More Effective C++:35个改善编程与设计的有效方法(中文版) 》&nbsp; 机器学习和数据挖掘 《数据之巅》 《矩阵分析》 《机器学习》 《统计学习方法》 《机器学习导论》 《推荐系统实践》 《机器学习实战》 《Web数据挖掘》 《深入浅出统计学》 《模式分类（第2版）》 《概率论与数理统计》 《统计学习基础(第2版)(英文) 》 《数据挖掘：概念与技术（第3版）》 《数据挖掘：实用机器学习工具与技术（原书第3版）》 《大数据：互联网大规模数据挖掘与分布式处理（第2版）》 数据库 《SQL应用重构》 《SQL Cookbook》 《高性能MySQL （第3版）》 《深入浅出SQL（中文版）》 《MySQL技术内幕 : InnoDB存储引擎（第2版）》 《深入浅出MySQL : 数据库开发、优化与管理维护》 测试 《探索式软件测试》 《有效的单元测试》 《Google软件测试之道》 项目与团队 《人月神话》 《快速软件开发》 《人件（原书第3版）》 《门后的秘密：卓越管理的故事》 《极客与团队：软件工程师的团队生存秘笈》 求职面试 《程序员面试金典（第5版）》 《编程之美 : 微软技术面试心得》 《金领简历：敲开苹果、微软、谷歌的大门》 《剑指Offer：名企面试官精讲典型编程题（纪念版）》 编程之外 《暗时间》 《数学之美》 《赢得朋友》 《精益创业》 《批判性思维》 《世界是数字的》 《程序员的数学》 《程序员健康指南》 《禅与摩托车维修艺术》 《关键对话：如何高效能沟通》 《写作法宝：非虚构写作指南》 《黑客与画家 : 来自计算机时代的高见》 《软件随想录（卷1）》《软件随想录（卷2）》 《如何把事情做到最好：改变全球9800万人的人生指导书》]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[熟练运用mac下的快捷键]]></title>
      <url>%2F2017%2F03%2F28%2F53453%2F</url>
      <content type="text"><![CDATA[符号－按键对照表 符号 按键 ⇪ caps lock ⌃ control ⌥ option ⌘ command ⇧ shift 常规快捷键 tag切换： command+{和command+}说明：由于{和}按键布局，所以实际上需要同时按住shift。即：shift+command+{ 唤起splotlight快速搜索:command+ space 窗口最大化 alt+command + f 窗口全屏 ctrl+command+f 关闭窗口：command+w 退出程序：command+q 切换显示桌面：command+f3或者fn+F11 复制文件：command+c 粘贴文件：command+v 剪切文件：先复制Comamand+c，然后command+option+v(粘贴并删除原先的文件，相当于剪切) 光标至行首、行尾：command+左箭头/右箭头 光标向前、向后走一个单词：alt+左箭头/右箭头 删除文件：alt+delete 重命名文件：enter 截图 shift+command+4，然后可以鼠标选择截图区域，图片自动保存到桌面 ctrl+shift+command+4，然后可以鼠标选择截图区域，图片自动保存到剪贴板 词典取词翻译功能 则自动翻译鼠标位置的单词: Control+Command+D 浏览器下快捷键 向上、向下滚动一屏:alt+up和alt+down 切换debug模式：alt+command +j 进入mobile模式：shift+command+m 输入法 切换输入法 control + space 中文状态输入英文字母 输入字母，然后caps lock ＋ enter或者shift＋enter 中文状态输入英文标点符号，则按住caps lock ＋ 标点符号就输入了。 中文状态输入小写英文字母符号：按下caps lock。如果想输入大写字母，则同时按住shift即可。 参考 在 Mac 上使用 Multi-Touch 手势]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[程序员的网站导航]]></title>
      <url>%2F2017%2F03%2F28%2F37246%2F</url>
      <content type="text"><![CDATA[问答: desc: stackoverflow url: http://stackoverflow.com/ blog: desc: 我的blogurl: https://superevanzhu.github.io/ desc: 一个练习算法的站点url: https://www.51nod.com/index.html title: 粉丝日志desc: 作者写了很多的技术干货url: http://blog.fens.me/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[中文分词库jieba的使用]]></title>
      <url>%2F2017%2F03%2F28%2F12207%2F</url>
      <content type="text"><![CDATA[一个好用的中文分词python库：jieba 使用如下：1234import jiebaseg_list = jieba.cut(&quot;我来到北京清华大学&quot;)print(&quot;,&quot;.join(seg_list)) 输出：1我,来到,北京,清华大学 参考 [fxsjy/jieba](https://github.com/fxsjy/jieba]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[2016Gartner新兴科技技术成熟度曲线]]></title>
      <url>%2F2017%2F03%2F28%2F23192%2F</url>
      <content type="text"><![CDATA[]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[什么是YAML]]></title>
      <url>%2F2017%2F03%2F28%2F62292%2F</url>
      <content type="text"><![CDATA[开发人员写xml文档，总是要写成对的标签，实在是难以忍受，于是有人定义了yaml语法，造福人类。 一个xml文档例子123456789&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;blog&gt; &lt;desc&gt;我的blog&lt;/desc&gt; &lt;url&gt;https://superevanzhu.github.io/&lt;/url&gt;&lt;/blog&gt;&lt;blog&gt; &lt;desc&gt;一个练习算法的站点&lt;/desc&gt; &lt;url&gt;https://www.51nod.com/index.html&lt;/url&gt;&lt;/blog&gt; 用yaml写法12345blog: - desc: 我的blog url: https://superevanzhu.github.io/ - desc: 一个练习算法的站点 url: https://www.51nod.com/index.html 是不是既简单又直观呢 yaml的语法语法很简单 符号 含义 和json的对比 - 列表的项目 数组 : key-value项目 对象的属性 空格缩进 嵌套关系 嵌套关系 要注意的是，-和:如何是接内容的话，至少要有一个空格分隔12345//正确的写法desc: 我的blog //不正确的写法desc:我的blog 和json的转换yaml和json语法上基本是等价的，可以互相转换。例如，json版本的数据： 123456789101112&#123; &quot;blog&quot;: [ &#123; &quot;desc&quot;: &quot;我的blog&quot;, &quot;url&quot;: &quot;https://superevanzhu.github.io/&quot; &#125;, &#123; &quot;desc&quot;: &quot;一个练习算法的站点&quot;, &quot;url&quot;: &quot;https://www.51nod.com/index.html&quot; &#125; ]&#125; 参考资料 官网 YAML 简介 yaml的js解析器]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[指南针－架构师必备技能图谱]]></title>
      <url>%2F2017%2F02%2F24%2F35934%2F</url>
      <content type="text"><![CDATA[我理想中的架构师，应该具备的技能，用一张图来描述 从底层开始，一层一层往上走 第一层 language：语言是工程师手中的原材料，是创造事物、实现思想的基本粒子。 algorithm &amp; data-structure：算法和数据结构。任何系统都可以抽象成为“数据＋数据的操作”。算法和数据结构要探讨的就是：如何用数据描述事物、如何高效的操作数据。 framework：框架的作用体现在工程效率上面。主要有两个：一，用来提升工程效率，因为不需要从零开始。二，整合整个团队的力量，因为制定了一些规则和约束，使得团队中不同水平的成员都可以较好的填充代码。 operation system。工程师不能操纵实际，操作的是机器。应用系统的代码归根结底是调用操作系统的接口。操作系统本身则是调用机器指令集。 database。现代的应用系统，基本上没有能离开数据库的。现代大型的系统，相当大的精力实在和“数据高效存储访问”做斗争。 network。网络的意义在于，可以无限的聚合单个微小力量。这是天然的优势。 第二层 distributed architecture：分布式架构。 distributed component：分布式组件。 第三层 common logic system：一般逻辑系统。 special logi system：特殊逻辑系统。 （完）]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[愉快的写作－markdown语法参考]]></title>
      <url>%2F2017%2F02%2F23%2F46161%2F</url>
      <content type="text"><![CDATA[markdown语法入门markdown标记法，就是用普通的文本，添加上少许的标记，显示出还算好看的效果。用它来写作，在也不需要word这种大块头软件，小小的文本编辑器就可以开始了。 下面介绍markdown一些常用标记的用法 标题在文字前面加上1~6个#号。可以表现出标题的效果。1个#是最大的标题，6个#是最小的标题。注意，#和文字之间要空一个空格，其他的标记一般都是这样。 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 ####### 六级标题 无序列表文字前面加上-&lt;空格&gt;或者+&lt;空格&gt;或者*&lt;空格&gt;，可以表现出列表的效果： 例子： - 文本1 - 文本2 等同于： * 文本1 * 文本2 也等同于： + 文本1 + 文本2 有序列表文字前面加上&lt;数字&gt;.&lt;空格&gt;，可以表现出带序号的列表。从1开始显示，1，2，3，…这样的。 1. 列表项 2. 列表项 3. 列表项 注意，有序列表中的数字的大小是无关的 1. 列表项 1. 列表项 1. 列表项 所以，像上面的写法，都是1，输出的也是按照1,2,3…顺序输出的。 文字的样式文字本身的样式，斜体，加粗，删除线，行内引用。 *斜体* **加粗** ~~删除线~~ `行内引用` 效果如下：斜体加粗删除线行内引用 引用文字格式： &gt; 一段的文字，可以产生类似与于邮件中，引用一段文字的效果。 我是一段文字哦 注意，引用的文字，用一个空白行结束。 另一种文字引用格式：一段文字前面加上4个空格可以产生一大块突出显示的文字。 我是一段文字哦 代码块想写一段代码块，可以用一对三个连续的反引号： \12345var comName = &apos;ngmm&apos;; //我是代码块\ 或者，不用三个反引号，而是将一段代码，整体缩进一个制表符，也能实现相同效果。 行内代码如果代码是不块，而是在一行内。用一对反引号括起来。 `我说行内代码` 水平分割线用三个以上的*或-或_占用一行，可以产生一条水平分隔线。例如： *** --- ___ 可点击链接格式：[链接的文字](链接的网址)，可以产生一个可点击的链接。例如： 必应 另一种链接链接也可以分成两部分：先定义链接、再使用链接格式：定义一个链接：[链接的ID]: 链接的网址 &quot;链接的文字&quot; 随后，可以在别的地方使用它：[链接的文字][链接的ID] 插入图片链接markdown本身是文本，所以不支持粘贴图片的。但是我们可以粘贴图片的链接，从而显示图片（图片本身是存在别的地方的）。 格式：![图片的alt文字](图片的网址) 反斜杠转义前面说到，markdown中*,+,-等符号是有特定意义的。那么，如果我想在文本中显示*,+,-本身呢？可以在特殊符号前面加上\。例如 \* -&gt; 输出*\+ -&gt; 输出+\- -&gt; 输出- 更多的特殊符号： \ 反斜线 ` 反引号 * 星号 _ 底线 {} 花括号 [] 方括号 () 括弧 # 井字号 + 加号 - 减号 . 英文句点 ! 惊叹号 更多非标准语法markdown还有更多的语法，比如表格之类的，不过只有少部分编辑器才能正确显示。这就意味着，如果真的想用他们的，得花点时间寻找一个支持更多Markdown语法的编辑器 表格12345| Tables | Are | Cool || ------------- |:-------------:| -----:|| col 3 is | right-aligned | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 | Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 设置列的对齐方式：左对齐、居中、右对齐 默认左对齐1------ 右对齐1-----: 居中对齐1:----: Markdown编辑器Windows 平台 MarkdownPad 2 MarkPadLinux 平台 ReTextMac 平台 Mou在线编辑器 Markable.in Dillinger.io浏览器插件 MaDe (Chrome) 参考资料 Markdown 语法说明]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[计算机编译技术三大圣经]]></title>
      <url>%2F2017%2F02%2F23%2F7878%2F</url>
      <content type="text"><![CDATA[计算机编译技术三大圣经 1.龙书(Dragon book)书名是Compilers: Principles,Techniques,and Tools作者是：Alfred V.Aho,Ravi Sethi,Jeffrey D.Ullman国内所有的编译原理教材都是抄的它的，而且只是抄了最简单的前端的一些内容。 2.鲸书(Whale book)书名是：Advanced Compiler Design and Implementation作者是：Steven S.Muchnick也就是高级编译原理，象什么陈疑云之类的估计也就是这个水平不错了 3.虎书(Tiger book)书名是：Modern Compiler Implementation in Java/C++/ML,Second Edition作者是：Andrew W.Appel,with Jens Palsberg这本书是3本书中最薄的一本，也是最最牛的一本！ （完）]]></content>
    </entry>

    
  
  
</search>
